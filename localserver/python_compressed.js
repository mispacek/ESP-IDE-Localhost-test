// Do not edit this file; automatically generated by gulp.

/* eslint-disable */
;(function(root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define(['./blockly_compressed.js'], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory(require('./blockly_compressed.js'));
  } else { // Browser
    root.Blockly.Python = factory(root.Blockly);
  }
}(this, function(Blockly) {
  'use strict';var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.createTemplateTagFirstArg=function(a){return a.raw=a};$jscomp.createTemplateTagFirstArgWithRaw=function(a,b){a.raw=b;return a};Blockly.Python=new Blockly.Generator("Python");Blockly.Python.addReservedWords("False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip");
Blockly.Python.ORDER_ATOMIC=0;Blockly.Python.ORDER_COLLECTION=1;Blockly.Python.ORDER_STRING_CONVERSION=1;Blockly.Python.ORDER_MEMBER=2.1;Blockly.Python.ORDER_FUNCTION_CALL=2.2;Blockly.Python.ORDER_EXPONENTIATION=3;Blockly.Python.ORDER_UNARY_SIGN=4;Blockly.Python.ORDER_BITWISE_NOT=4;Blockly.Python.ORDER_MULTIPLICATIVE=5;Blockly.Python.ORDER_ADDITIVE=6;Blockly.Python.ORDER_BITWISE_SHIFT=7;Blockly.Python.ORDER_BITWISE_AND=8;Blockly.Python.ORDER_BITWISE_XOR=9;Blockly.Python.ORDER_BITWISE_OR=10;
Blockly.Python.ORDER_RELATIONAL=11;Blockly.Python.ORDER_LOGICAL_NOT=12;Blockly.Python.ORDER_LOGICAL_AND=13;Blockly.Python.ORDER_LOGICAL_OR=14;Blockly.Python.ORDER_CONDITIONAL=15;Blockly.Python.ORDER_LAMBDA=16;Blockly.Python.ORDER_NONE=99;
Blockly.Python.ORDER_OVERRIDES=[[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_LOGICAL_NOT,Blockly.Python.ORDER_LOGICAL_NOT],[Blockly.Python.ORDER_LOGICAL_AND,Blockly.Python.ORDER_LOGICAL_AND],[Blockly.Python.ORDER_LOGICAL_OR,Blockly.Python.ORDER_LOGICAL_OR]];
Blockly.Python.isInitialized=!1;
Blockly.Python.init=function(a){Object.getPrototypeOf(this).init.call(this);this.PASS=this.INDENT+"pass\n";this.nameDB_?this.nameDB_.reset():this.nameDB_=new Blockly.Names(this.RESERVED_WORDS_);this.nameDB_.setVariableMap(a.getVariableMap());this.nameDB_.populateVariables(a);this.nameDB_.populateProcedures(a);for(var b=[],c=Blockly.Variables.allDeveloperVariables(a),d=0;d<c.length;d++)b.push(this.nameDB_.getName(c[d],Blockly.Names.DEVELOPER_VARIABLE_TYPE)+" = None");a=Blockly.Variables.allUsedVarModels(a);
for(d=0;d<a.length;d++)b.push(this.nameDB_.getName(a[d].getId(),Blockly.VARIABLE_CATEGORY_NAME)+" = None");this.definitions_.variables=b.join("\n");this.isInitialized=!0};
Blockly.Python.finish=function(a){var b=[],c=[],d;for(d in this.definitions_){var e=this.definitions_[d];e.match(/^(from\s+\S+\s+)?import\s+\S+/)?b.push(e):c.push(e)}a=Object.getPrototypeOf(this).finish.call(this,a);this.isInitialized=!1;this.nameDB_.reset();return(b.join("\n")+"\n\n"+c.join("\n\n")).replace(/\n\n+/g,"\n\n").replace(/\n*$/,"\n\n\n")+a};Blockly.Python.scrubNakedValue=function(a){return a+"\n"};
Blockly.Python.quote_=function(a){a=a.replace(/\\/g,"\\\\").replace(/\n/g,"\\\n");var b="'";-1!==a.indexOf("'")&&(-1===a.indexOf('"')?b='"':a=a.replace(/'/g,"\\'"));return b+a+b};Blockly.Python.multiline_quote_=function(a){return a.split(/\n/g).map(this.quote_).join(" + '\\n' + \n")};
Blockly.Python.scrub_=function(a,b,c){var d="";if(!a.outputConnection||!a.outputConnection.targetConnection){var e=a.getCommentText();e&&(e=Blockly.utils.string.wrap(e,this.COMMENT_WRAP-3),d+=this.prefixLines(e+"\n","# "));for(var f=0;f<a.inputList.length;f++)a.inputList[f].type==Blockly.inputTypes.VALUE&&(e=a.inputList[f].connection.targetBlock())&&(e=this.allNestedComments(e))&&(d+=this.prefixLines(e,"# "))}a=a.nextConnection&&a.nextConnection.targetBlock();c=c?"":this.blockToCode(a);return d+b+
c};Blockly.Python.getAdjustedInt=function(a,b,c,d){c=c||0;a.workspace.options.oneBasedIndex&&c--;var e=a.workspace.options.oneBasedIndex?"1":"0";a=this.valueToCode(a,b,c?this.ORDER_ADDITIVE:this.ORDER_NONE)||e;Blockly.isNumber(a)?(a=parseInt(a,10)+c,d&&(a=-a)):(a=0<c?"int("+a+" + "+c+")":0>c?"int("+a+" - "+-c+")":"int("+a+")",d&&(a="-"+a));return a};Blockly.Python.colour={};Blockly.Python.colour_picker=function(a){return[Blockly.Python.quote_(a.getFieldValue("COLOUR")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.colour_random=function(a){Blockly.Python.definitions_.import_random="import random";return["'#%06x' % random.randint(0, 2**24 - 1)",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.colour_rgb=function(a){var b=Blockly.Python.provideFunction_("colour_rgb",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(r, g, b):","  r = round(min(100, max(0, r)) * 2.55)","  g = round(min(100, max(0, g)) * 2.55)","  b = round(min(100, max(0, b)) * 2.55)","  return '#%02x%02x%02x' % (r, g, b)"]),c=Blockly.Python.valueToCode(a,"RED",Blockly.Python.ORDER_NONE)||0,d=Blockly.Python.valueToCode(a,"GREEN",Blockly.Python.ORDER_NONE)||0;a=Blockly.Python.valueToCode(a,"BLUE",Blockly.Python.ORDER_NONE)||
0;return[b+"("+c+", "+d+", "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.colour_blend=function(a){var b=Blockly.Python.provideFunction_("colour_blend",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(colour1, colour2, ratio):","  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)","  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)","  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)","  ratio = min(1, max(0, ratio))","  r = round(r1 * (1 - ratio) + r2 * ratio)","  g = round(g1 * (1 - ratio) + g2 * ratio)","  b = round(b1 * (1 - ratio) + b2 * ratio)",
"  return '#%02x%02x%02x' % (r, g, b)"]),c=Blockly.Python.valueToCode(a,"COLOUR1",Blockly.Python.ORDER_NONE)||"'#000000'",d=Blockly.Python.valueToCode(a,"COLOUR2",Blockly.Python.ORDER_NONE)||"'#000000'";a=Blockly.Python.valueToCode(a,"RATIO",Blockly.Python.ORDER_NONE)||0;return[b+"("+c+", "+d+", "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.lists={};Blockly.Python.lists_create_empty=function(a){return["[]",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.lists_create_with=function(a){for(var b=Array(a.itemCount_),c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,"ADD"+c,Blockly.Python.ORDER_NONE)||"None";return["["+b.join(", ")+"]",Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.lists_repeat=function(a){var b=Blockly.Python.valueToCode(a,"ITEM",Blockly.Python.ORDER_NONE)||"None";a=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";return["["+b+"] * "+a,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.lists_length=function(a){return["len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"[]")+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_isEmpty=function(a){return["not len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"[]")+")",Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.lists_indexOf=function(a){var b=Blockly.Python.valueToCode(a,"FIND",Blockly.Python.ORDER_NONE)||"[]",c=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''";if(a.workspace.options.oneBasedIndex)var d=" 0",e=" + 1",f="";else d=" -1",e="",f=" - 1";if("FIRST"==a.getFieldValue("END"))return a=Blockly.Python.provideFunction_("first_index",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = my_list.index(elem)"+e,"  except: index ="+d,"  return index"]),
[a+"("+c+", "+b+")",Blockly.Python.ORDER_FUNCTION_CALL];a=Blockly.Python.provideFunction_("last_index",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = len(my_list) - my_list[::-1].index(elem)"+f,"  except: index ="+d,"  return index"]);return[a+"("+c+", "+b+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_getIndex=function(a){var b=a.getFieldValue("MODE")||"GET",c=a.getFieldValue("WHERE")||"FROM_START",d=Blockly.Python.valueToCode(a,"VALUE","RANDOM"==c?Blockly.Python.ORDER_NONE:Blockly.Python.ORDER_MEMBER)||"[]";switch(c){case "FIRST":if("GET"==b)return[d+"[0]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop(0)",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop(0)\n";break;case "LAST":if("GET"==b)return[d+"[-1]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==
b)return[d+".pop()",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop()\n";break;case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT");if("GET"==b)return[d+"["+a+"]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop("+a+")",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop("+a+")\n";break;case "FROM_END":a=Blockly.Python.getAdjustedInt(a,"AT",1,!0);if("GET"==b)return[d+"["+a+"]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop("+a+")",
Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop("+a+")\n";break;case "RANDOM":Blockly.Python.definitions_.import_random="import random";if("GET"==b)return["random.choice("+d+")",Blockly.Python.ORDER_FUNCTION_CALL];d=Blockly.Python.provideFunction_("lists_remove_random_item",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  x = int(random.random() * len(myList))","  return myList.pop(x)"])+"("+d+")";if("GET_REMOVE"==b)return[d,Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==
b)return d+"\n"}throw Error("Unhandled combination (lists_getIndex).");};
Blockly.Python.lists_setIndex=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_MEMBER)||"[]",c=a.getFieldValue("MODE")||"GET",d=a.getFieldValue("WHERE")||"FROM_START",e=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"None";switch(d){case "FIRST":if("SET"==c)return b+"[0] = "+e+"\n";if("INSERT"==c)return b+".insert(0, "+e+")\n";break;case "LAST":if("SET"==c)return b+"[-1] = "+e+"\n";if("INSERT"==c)return b+".append("+e+")\n";break;case "FROM_START":a=Blockly.Python.getAdjustedInt(a,
"AT");if("SET"==c)return b+"["+a+"] = "+e+"\n";if("INSERT"==c)return b+".insert("+a+", "+e+")\n";break;case "FROM_END":a=Blockly.Python.getAdjustedInt(a,"AT",1,!0);if("SET"==c)return b+"["+a+"] = "+e+"\n";if("INSERT"==c)return b+".insert("+a+", "+e+")\n";break;case "RANDOM":Blockly.Python.definitions_.import_random="import random";b.match(/^\w+$/)?a="":(a=Blockly.Python.nameDB_.getDistinctName("tmp_list",Blockly.VARIABLE_CATEGORY_NAME),d=a+" = "+b+"\n",b=a,a=d);d=Blockly.Python.nameDB_.getDistinctName("tmp_x",
Blockly.VARIABLE_CATEGORY_NAME);a+=d+" = int(random.random() * len("+b+"))\n";if("SET"==c)return a+(b+"["+d+"] = "+e+"\n");if("INSERT"==c)return a+(b+".insert("+d+", "+e+")\n")}throw Error("Unhandled combination (lists_setIndex).");};
Blockly.Python.lists_getSublist=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_MEMBER)||"[]",c=a.getFieldValue("WHERE1"),d=a.getFieldValue("WHERE2");switch(c){case "FROM_START":c=Blockly.Python.getAdjustedInt(a,"AT1");"0"==c&&(c="");break;case "FROM_END":c=Blockly.Python.getAdjustedInt(a,"AT1",1,!0);break;case "FIRST":c="";break;default:throw Error("Unhandled option (lists_getSublist)");}switch(d){case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT2",1);break;case "FROM_END":a=
Blockly.Python.getAdjustedInt(a,"AT2",0,!0);Blockly.isNumber(String(a))?"0"==a&&(a=""):(Blockly.Python.definitions_.import_sys="import sys",a+=" or sys.maxsize");break;case "LAST":a="";break;default:throw Error("Unhandled option (lists_getSublist)");}return[b+"["+c+" : "+a+"]",Blockly.Python.ORDER_MEMBER]};
Blockly.Python.lists_sort=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]",c=a.getFieldValue("TYPE");a="1"===a.getFieldValue("DIRECTION")?"False":"True";return[Blockly.Python.provideFunction_("lists_sort",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, type, reverse):","  def try_float(s):","    try:","      return float(s)","    except:","      return 0","  key_funcs = {",'    "NUMERIC": try_float,','    "TEXT": str,','    "IGNORE_CASE": lambda s: str(s).lower()',
"  }","  key_func = key_funcs[type]","  list_cpy = list(my_list)","  return sorted(list_cpy, key=key_func, reverse=reverse)"])+"("+b+', "'+c+'", '+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_split=function(a){var b=a.getFieldValue("MODE");if("SPLIT"==b)b=Blockly.Python.valueToCode(a,"INPUT",Blockly.Python.ORDER_MEMBER)||"''",a=Blockly.Python.valueToCode(a,"DELIM",Blockly.Python.ORDER_NONE),a=b+".split("+a+")";else if("JOIN"==b)b=Blockly.Python.valueToCode(a,"INPUT",Blockly.Python.ORDER_NONE)||"[]",a=Blockly.Python.valueToCode(a,"DELIM",Blockly.Python.ORDER_MEMBER)||"''",a=a+".join("+b+")";else throw Error("Unknown mode: "+b);return[a,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_reverse=function(a){return["list(reversed("+(Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]")+"))",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.logic={};
Blockly.Python.controls_if=function(a){var b=0,c="";Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));do{var d=Blockly.Python.valueToCode(a,"IF"+b,Blockly.Python.ORDER_NONE)||"False";var e=Blockly.Python.statementToCode(a,"DO"+b)||Blockly.Python.PASS;Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e);c+=(0==b?"if ":"elif ")+d+":\n"+e;++b}while(a.getInput("IF"+
b));if(a.getInput("ELSE")||Blockly.Python.STATEMENT_SUFFIX)e=Blockly.Python.statementToCode(a,"ELSE")||Blockly.Python.PASS,Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e),c+="else:\n"+e;return c};Blockly.Python.controls_ifelse=Blockly.Python.controls_if;
Blockly.Python.logic_compare=function(a){var b={EQ:"==",NEQ:"!=",LT:"<",LTE:"<=",GT:">",GTE:">="}[a.getFieldValue("OP")],c=Blockly.Python.ORDER_RELATIONAL,d=Blockly.Python.valueToCode(a,"A",c)||"0";a=Blockly.Python.valueToCode(a,"B",c)||"0";return[d+" "+b+" "+a,c]};
Blockly.Python.logic_operation=function(a){var b="AND"==a.getFieldValue("OP")?"and":"or",c="and"==b?Blockly.Python.ORDER_LOGICAL_AND:Blockly.Python.ORDER_LOGICAL_OR,d=Blockly.Python.valueToCode(a,"A",c);a=Blockly.Python.valueToCode(a,"B",c);if(d||a){var e="and"==b?"True":"False";d||(d=e);a||(a=e)}else a=d="False";return[d+" "+b+" "+a,c]};Blockly.Python.logic_negate=function(a){return["not "+(Blockly.Python.valueToCode(a,"BOOL",Blockly.Python.ORDER_LOGICAL_NOT)||"True"),Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.logic_boolean=function(a){return["TRUE"==a.getFieldValue("BOOL")?"True":"False",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.logic_null=function(a){return["None",Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.logic_ternary=function(a){var b=Blockly.Python.valueToCode(a,"IF",Blockly.Python.ORDER_CONDITIONAL)||"False",c=Blockly.Python.valueToCode(a,"THEN",Blockly.Python.ORDER_CONDITIONAL)||"None";a=Blockly.Python.valueToCode(a,"ELSE",Blockly.Python.ORDER_CONDITIONAL)||"None";return[c+" if "+b+" else "+a,Blockly.Python.ORDER_CONDITIONAL]};Blockly.Python.loops={};
Blockly.Python.controls_repeat_ext=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=a.getField("TIMES")?String(parseInt(a.getFieldValue("TIMES"),10)):Blockly.Python.valueToCode(a,"TIMES",Blockly.Python.ORDER_NONE)||"0";b=Blockly.isNumber(b)?parseInt(b,10):"int("+b+")";var c=Blockly.Python.statementToCode(a,"DO");c=Blockly.Python.addLoopTrap("  utime.sleep_ms(0)\n"+c,a)||Blockly.Python.PASS;return"for "+Blockly.Python.nameDB_.getDistinctName("count",Blockly.VARIABLE_CATEGORY_NAME)+
" in range("+b+"):\n"+c};Blockly.Python.controls_repeat=Blockly.Python.controls_repeat_ext;
Blockly.Python.controls_whileUntil=function(a){Blockly.Python.definitions_.import_utime="import utime";var b="UNTIL"==a.getFieldValue("MODE"),c=Blockly.Python.valueToCode(a,"BOOL",b?Blockly.Python.ORDER_LOGICAL_NOT:Blockly.Python.ORDER_NONE)||"False",d=Blockly.Python.statementToCode(a,"DO");d=Blockly.Python.addLoopTrap("  utime.sleep_ms(0)\n"+d,a)||Blockly.Python.PASS;b&&(c="not "+c);return"while "+c+":\n"+d};
Blockly.Python.controls_for=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"0",d=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"0",e=Blockly.Python.valueToCode(a,"BY",Blockly.Python.ORDER_NONE)||"1",f=Blockly.Python.statementToCode(a,"DO");f=Blockly.Python.addLoopTrap("  utime.sleep_ms(0)\n"+f,a)||Blockly.Python.PASS;
var k="",g=function(){return Blockly.Python.provideFunction_("upRange",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start <= stop:","    yield start","    start += abs(step)"])},l=function(){return Blockly.Python.provideFunction_("downRange",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start >= stop:","    yield start","    start -= abs(step)"])};a=function(h,m,p){return"("+h+" <= "+m+") and "+g()+"("+h+", "+m+", "+p+") or "+
l()+"("+h+", "+m+", "+p+")"};if(Blockly.isNumber(c)&&Blockly.isNumber(d)&&Blockly.isNumber(e))c=Number(c),d=Number(d),e=Math.abs(Number(e)),0===c%1&&0===d%1&&0===e%1?(c<=d?(d++,a=0==c&&1==e?d:c+", "+d,1!=e&&(a+=", "+e)):(d--,a=c+", "+d+", -"+e),a="range("+a+")"):(a=c<d?g():l(),a+="("+c+", "+d+", "+e+")");else{var n=function(h,m){Blockly.isNumber(h)?h=Number(h):h.match(/^\w+$/)?h="float("+h+")":(m=Blockly.Python.nameDB_.getDistinctName(b+m,Blockly.VARIABLE_CATEGORY_NAME),k+=m+" = float("+h+")\n",h=
m);return h};c=n(c,"_start");d=n(d,"_end");e=n(e,"_inc");"number"==typeof c&&"number"==typeof d?(a=c<d?g():l(),a+="("+c+", "+d+", "+e+")"):a=a(c,d,e)}return k+="for "+b+" in "+a+":\n"+f};
Blockly.Python.controls_forEach=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME),c=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_RELATIONAL)||"[]",d=Blockly.Python.statementToCode(a,"DO");d=Blockly.Python.addLoopTrap("  utime.sleep_ms(0)\n"+d,a)||Blockly.Python.PASS;return"for "+b+" in "+c+":\n"+d};
Blockly.Python.controls_flow_statements=function(a){var b="";Blockly.Python.STATEMENT_PREFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));if(Blockly.Python.STATEMENT_PREFIX){var c=Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);c&&!c.suppressPrefixSuffix&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,c))}switch(a.getFieldValue("FLOW")){case "BREAK":return b+
"break\n";case "CONTINUE":return b+"continue\n"}throw Error("Unknown flow statement.");};Blockly.Python.math={};Blockly.Python.addReservedWords("math,random,Number");Blockly.Python.math_number=function(a){a=Number(a.getFieldValue("NUM"));if(Infinity==a){a='float("inf")';var b=Blockly.Python.ORDER_FUNCTION_CALL}else-Infinity==a?(a='-float("inf")',b=Blockly.Python.ORDER_UNARY_SIGN):b=0>a?Blockly.Python.ORDER_UNARY_SIGN:Blockly.Python.ORDER_ATOMIC;return[a,b]};
Blockly.Python.math_arithmetic=function(a){var b={ADD:[" + ",Blockly.Python.ORDER_ADDITIVE],MINUS:[" - ",Blockly.Python.ORDER_ADDITIVE],MULTIPLY:[" * ",Blockly.Python.ORDER_MULTIPLICATIVE],DIVIDE:[" / ",Blockly.Python.ORDER_MULTIPLICATIVE],POWER:[" ** ",Blockly.Python.ORDER_EXPONENTIATION]}[a.getFieldValue("OP")],c=b[0];b=b[1];var d=Blockly.Python.valueToCode(a,"A",b)||"0";a=Blockly.Python.valueToCode(a,"B",b)||"0";return[d+c+a,b]};
Blockly.Python.math_single=function(a){var b=a.getFieldValue("OP");if("NEG"==b){var c=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_UNARY_SIGN)||"0";return["-"+c,Blockly.Python.ORDER_UNARY_SIGN]}Blockly.Python.definitions_.import_math="import math";a="SIN"==b||"COS"==b||"TAN"==b?Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_MULTIPLICATIVE)||"0":Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_NONE)||"0";switch(b){case "ABS":c="math.fabs("+a+")";break;case "ROOT":c="math.sqrt("+
a+")";break;case "LN":c="math.log("+a+")";break;case "LOG10":c="math.log10("+a+")";break;case "EXP":c="math.exp("+a+")";break;case "POW10":c="math.pow(10,"+a+")";break;case "ROUND":c="round("+a+")";break;case "ROUNDUP":c="math.ceil("+a+")";break;case "ROUNDDOWN":c="math.floor("+a+")";break;case "SIN":c="math.sin("+a+" / 180.0 * math.pi)";break;case "COS":c="math.cos("+a+" / 180.0 * math.pi)";break;case "TAN":c="math.tan("+a+" / 180.0 * math.pi)"}if(c)return[c,Blockly.Python.ORDER_FUNCTION_CALL];switch(b){case "ASIN":c=
"math.asin("+a+") / math.pi * 180";break;case "ACOS":c="math.acos("+a+") / math.pi * 180";break;case "ATAN":c="math.atan("+a+") / math.pi * 180";break;default:throw Error("Unknown math operator: "+b);}return[c,Blockly.Python.ORDER_MULTIPLICATIVE]};
Blockly.Python.math_constant=function(a){var b={PI:["math.pi",Blockly.Python.ORDER_MEMBER],E:["math.e",Blockly.Python.ORDER_MEMBER],GOLDEN_RATIO:["(1 + math.sqrt(5)) / 2",Blockly.Python.ORDER_MULTIPLICATIVE],SQRT2:["math.sqrt(2)",Blockly.Python.ORDER_MEMBER],SQRT1_2:["math.sqrt(1.0 / 2)",Blockly.Python.ORDER_MEMBER],INFINITY:["float('inf')",Blockly.Python.ORDER_ATOMIC]};a=a.getFieldValue("CONSTANT");"INFINITY"!=a&&(Blockly.Python.definitions_.import_math="import math");return b[a]};
Blockly.Python.math_number_property=function(a){var b=Blockly.Python.valueToCode(a,"NUMBER_TO_CHECK",Blockly.Python.ORDER_MULTIPLICATIVE)||"0",c=a.getFieldValue("PROPERTY");if("PRIME"==c)return Blockly.Python.definitions_.import_math="import math",[Blockly.Python.provideFunction_("math_isPrime",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(n):","  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods","  if n == 2 or n == 3:","    return True","  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.",
"  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:","    return False","  # Check all the numbers of form 6k +/- 1, up to sqrt(n).","  for x in range(6, int(math.sqrt(n)) + 2, 6):","    if n % (x - 1) == 0 or n % (x + 1) == 0:","      return False","  return True"])+"("+b+")",Blockly.Python.ORDER_FUNCTION_CALL];switch(c){case "EVEN":var d=b+" % 2 == 0";break;case "ODD":d=b+" % 2 == 1";break;case "WHOLE":d=b+" % 1 == 0";break;case "POSITIVE":d=b+" > 0";break;case "NEGATIVE":d=b+" < 0";break;case "DIVISIBLE_BY":a=
Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE);if(!a||"0"==a)return["False",Blockly.Python.ORDER_ATOMIC];d=b+" % "+a+" == 0"}return[d,Blockly.Python.ORDER_RELATIONAL]};Blockly.Python.math_change=function(a){var b=Blockly.Python.valueToCode(a,"DELTA",Blockly.Python.ORDER_ADDITIVE)||"0";a=Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME);return a+" = "+a+" + "+b+"\n"};Blockly.Python.math_round=Blockly.Python.math_single;
Blockly.Python.math_trig=Blockly.Python.math_single;
Blockly.Python.math_on_list=function(a){var b=a.getFieldValue("OP");a=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]";switch(b){case "SUM":b="sum("+a+")";break;case "MIN":b="min("+a+")";break;case "MAX":b="max("+a+")";break;case "AVERAGE":b=Blockly.Python.provideFunction_("math_mean",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = [e for e in myList]","  if not localList: return","  return float(sum(localList)) / len(localList)"]);b=b+"("+a+")";break;
case "MEDIAN":b=Blockly.Python.provideFunction_("math_median",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = sorted([e for e in myList])","  if not localList: return","  if len(localList) % 2 == 0:","    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0","  else:","    return localList[(len(localList) - 1) // 2]"]);b=b+"("+a+")";break;case "MODE":b=Blockly.Python.provideFunction_("math_modes",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+
"(some_list):","  modes = []","  # Using a lists of [item, count] to keep count rather than dict",'  # to avoid "unhashable" errors when the counted item is itself a list or dict.',"  counts = []","  maxCount = 1","  for item in some_list:","    found = False","    for count in counts:","      if count[0] == item:","        count[1] += 1","        maxCount = max(maxCount, count[1])","        found = True","    if not found:","      counts.append([item, 1])","  for counted_item, item_count in counts:",
"    if item_count == maxCount:","      modes.append(counted_item)","  return modes"]);b=b+"("+a+")";break;case "STD_DEV":Blockly.Python.definitions_.import_math="import math";b=Blockly.Python.provideFunction_("math_standard_deviation",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(numbers):","  n = len(numbers)","  if n == 0: return","  mean = float(sum(numbers)) / n","  variance = sum((x - mean) ** 2 for x in numbers) / n","  return math.sqrt(variance)"]);b=b+"("+a+")";break;case "RANDOM":Blockly.Python.definitions_.import_random=
"import random";b="random.choice("+a+")";break;default:throw Error("Unknown operator: "+b);}return[b,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_modulo=function(a){var b=Blockly.Python.valueToCode(a,"DIVIDEND",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";a=Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";return[b+" % "+a,Blockly.Python.ORDER_MULTIPLICATIVE]};
Blockly.Python.math_constrain=function(a){var b=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.valueToCode(a,"LOW",Blockly.Python.ORDER_NONE)||"0";a=Blockly.Python.valueToCode(a,"HIGH",Blockly.Python.ORDER_NONE)||"float('inf')";return["min(max("+b+", "+c+"), "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.math_random_int=function(a){Blockly.Python.definitions_.import_random="import random";var b=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"0";a=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"0";return["random.randint("+b+", "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_float=function(a){Blockly.Python.definitions_.import_random="import random";return["random.random()",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.math_atan2=function(a){Blockly.Python.definitions_.import_math="import math";var b=Blockly.Python.valueToCode(a,"X",Blockly.Python.ORDER_NONE)||"0";return["math.atan2("+(Blockly.Python.valueToCode(a,"Y",Blockly.Python.ORDER_NONE)||"0")+", "+b+") / math.pi * 180",Blockly.Python.ORDER_MULTIPLICATIVE]};function RGB2HEX(a,b,c){return"#"+componentToHex(a)+componentToHex(b)+componentToHex(c)}function HEX2RGB(a){a=a.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,function(b,c,d,e){return c+c+d+d+e+e});return(a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a))?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null}
function HUE2HEX(a,b,c){c/=100;var d=b*Math.min(c,1-c)/100;b=function(e){e=(e+a/30)%12;return Math.round(255*(c-d*Math.max(Math.min(e-3,9-e,1),-1))).toString(16).padStart(2,"0")};return"#"+b(0)+b(8)+b(4)}var UPythonClass={};Blockly.Python.pinout8266=function(a){return[a.getFieldValue("PIN"),Blockly.Python.ORDER_NONE]};Blockly.Python.pinout=function(a){return[a.getFieldValue("PIN"),Blockly.Python.ORDER_NONE]};Blockly.Python.pinout_ESP32C3=function(a){return[a.getFieldValue("PIN"),Blockly.Python.ORDER_NONE]};
Blockly.Python.adc_pinout=function(a){return[a.getFieldValue("PIN"),Blockly.Python.ORDER_NONE]};Blockly.Python.adc_ESP32C3_pinout=function(a){return[a.getFieldValue("PIN"),Blockly.Python.ORDER_NONE]};Blockly.Python.any_to_int=function(a){return["int("+Blockly.Python.valueToCode(a,"NAME",Blockly.Python.ORDER_ATOMIC)+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.gpio_set=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"value",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.gpio_set="def gpio_set(pin,value):\n  if value >= 1:\n    Pin(pin, Pin.OUT).on()\n  else:\n    Pin(pin, Pin.OUT).off()";return"gpio_set("+b+", "+a+")\n"};
Blockly.Python.pwm=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_NONE),c=Blockly.Python.valueToCode(a,"frequency",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"duty",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_pwm="from machine import PWM";this.setID(b);return"pwm"+b+" = PWM(Pin("+b+"))\npwm"+b+".freq("+c+")\npwm"+b+".duty("+a+")\n"};
Blockly.Python["pwm.init"]=function(a){a=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_NONE);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_pwm="from machine import PWM";this.setID(a);return"pwm"+a+" = PWM(Pin("+a+"))\n"};Blockly.Python["pwm.freq"]=function(a){var b=a.getFieldValue("ID");a=Blockly.Python.valueToCode(a,"frequency",Blockly.Python.ORDER_NONE);return"pwm"+b+".freq("+a+")\n"};
Blockly.Python["pwm.duty"]=function(a){var b=a.getFieldValue("ID");a=Blockly.Python.valueToCode(a,"duty",Blockly.Python.ORDER_NONE);return"pwm"+b+".duty("+a+")\n"};Blockly.Python["pwm.deinit"]=function(a){return"pwm"+a.getFieldValue("ID")+".deinit()\n"};
Blockly.Python.gpio_init_get=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";b=b.replace("(","").replace(")","");a=a.getFieldValue("in_pin");Blockly.Python.definitions_["gpio_get_"+b]="Pin"+b+"=Pin("+b+", Pin.IN , Pin."+a+")\n\n";return""};
Blockly.Python.gpio_get=function(a){a=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";a=a.replace("(","").replace(")","");"undefined"==typeof Blockly.Python.definitions_["gpio_get_"+a]&&(Blockly.Python.definitions_["gpio_get_"+a]="Pin"+a+"=Pin("+a+", Pin.IN)\n\n");return["Pin"+a+".value()",Blockly.Python.ORDER_NONE]};
Blockly.Python.esp32_adc=function(a){Blockly.Python.definitions_.import_adc="from machine import ADC";Blockly.Python.definitions_.import_pin="from machine import Pin";var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC).replace("(","").replace(")",""),c=a.getFieldValue("Attenuation");a=a.getFieldValue("Width: ");var d="ADC.ATTN_0DB";0==c&&(d="ADC.ATTN_0DB");1==c&&(d="ADC.ATTN_2_5DB");2==c&&(d="ADC.ATTN_6DB");3==c&&(d="ADC.ATTN_11DB");c="ADC.WIDTH_10BIT";0==a&&(c="ADC.WIDTH_9BIT");
1==a&&(c="ADC.WIDTH_10BIT");2==a&&(c="ADC.WIDTH_11BIT");3==a&&(c="ADC.WIDTH_12BIT");Blockly.Python.definitions_["init_adc"+b]="adc"+b+"=ADC(Pin("+b+"))\nadc"+b+".atten("+d+")\nadc"+b+".width("+c+")\n";return["adc"+b+".read()",Blockly.Python.ORDER_NONE]};
Blockly.Python.esp32C3_adc=function(a){Blockly.Python.definitions_.import_adc="from machine import ADC";Blockly.Python.definitions_.import_pin="from machine import Pin";var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC).replace("(","").replace(")",""),c=a.getFieldValue("Attenuation");a=a.getFieldValue("Width: ");var d="ADC.ATTN_0DB";0==c&&(d="ADC.ATTN_0DB");1==c&&(d="ADC.ATTN_2_5DB");2==c&&(d="ADC.ATTN_6DB");3==c&&(d="ADC.ATTN_11DB");Blockly.Python.definitions_["init_adc"+b]="adc"+
b+"=ADC(Pin("+b+"))\nadc"+b+".atten("+d+")\n\n";return["int(adc"+b+".read()/"+a+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.touch_pin_sens=function(a){var b=a.getFieldValue("pin");a=a.getFieldValue("citlivost");Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_touchpad="\n\nfrom machine import TouchPad\n\ndef is_touched_pin(pin_id, treshold=300):\n    if pin_id.read() < treshold:\n        return True\n    else:\n        return False\n";Blockly.Python.definitions_["import_touchpad"+b]="touch"+b+" = TouchPad(Pin("+b+"))\n";return["is_touched_pin(touch"+b+","+
a+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.gpio_interrupt=function(a){var b=a.getFieldValue("trigger"),c=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.statementToCode(a,"code");c=c.replace("(","").replace(")","");for(var e=[],f=Blockly.Variables.allUsedVarModels(a.workspace)||[],k=0,g;g=f[k];k++)g=g.name,-1==a.getVars().indexOf(g)&&e.push(Blockly.Python.nameDB_.getName(g,Blockly.VARIABLE_CATEGORY_NAME));e=e.length?Blockly.Python.INDENT+"global "+e.join(", ")+"\n":"";Blockly.Python.definitions_.import_pin=
"from machine import Pin";"BOTH"==b&&(b="IRQ_RISING | Pin.IRQ_FALLING");a="";c&&(a="\n#Funkce pro preruseni\ndef callback"+c+"(pPin):\n"+e+d+"#Konec fuknce pro preruseni\n\np"+(c+" = Pin("+c+", Pin.IN)\np")+(c+".irq(trigger=Pin."+b+", handler=callback"+c+")\n"));return a};Blockly.Python.gpio_interrupt_off=function(a){a=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);a=a.replace("(","").replace(")","");var b="";a&&(b="p"+a+".irq(trigger=0, handler=callback"+a+")\n");return b};
Blockly.Python["utime.delay"]=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=Blockly.Python.valueToCode(a,"TIME",Blockly.Python.ORDER_NONE);return"utime."+a.getFieldValue("SCALE")+"("+b+")\n"};Blockly.Python["utime.vars"]=function(a){Blockly.Python.definitions_.import_utime="import utime";return["utime."+a.getFieldValue("VARS")+"()",Blockly.Python.ORDER_NONE]};
Blockly.Python["utime.ticks_add"]=function(a){Blockly.Python.definitions_.import_utime="import utime";return"utime.ticks_add("+Blockly.Python.valueToCode(a,"Pin",Blockly.Python.ORDER_ATOMIC)+")\n"};Blockly.Python["utime.ticks_diff"]=function(a){Blockly.Python.definitions_.import_utime="import utime";return"utime.ticks_diff("+Blockly.Python.valueToCode(a,"Pin",Blockly.Python.ORDER_ATOMIC)+")\n"};
Blockly.Python.esp32_set_rtc=function(a){Blockly.Python.definitions_.import_rtc="from machine import RTC";var b=Blockly.Python.valueToCode(a,"year",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"month",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"day",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"hour",Blockly.Python.ORDER_ATOMIC),f=Blockly.Python.valueToCode(a,"minute",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"second",Blockly.Python.ORDER_ATOMIC);
return"RTC().datetime(("+b+","+c+","+d+",0,"+e+","+f+","+a+",0))\n"};Blockly.Python.esp32_get_rtc=function(a){Blockly.Python.definitions_.import_rtc="from machine import RTC";return["RTC().datetime()",Blockly.Python.ORDER_NONE]};
Blockly.Python.ntp_sync=function(a){a=Blockly.Python.valueToCode(a,"tz",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_ntp="import ntptime";Blockly.Python.definitions_.import_rtc="from machine import RTC";Blockly.Python.definitions_.import_utime="import utime";Blockly.Python.definitions_.set_ntp_time="\ndef set_ntp_time(timezone = 0):\n    ntptime.settime()\n    rtc = RTC()\n    utc_shift=timezone\n    tm = utime.localtime(utime.mktime(utime.localtime()) + utc_shift*3600)\n    tm = tm[0:3] + (0,) + tm[3:6] + (0,)\n    rtc.datetime(tm)\n";
return"set_ntp_time("+a+")\n"};Blockly.Python.cas_var=function(a){a=a.getFieldValue("idx");Blockly.Python.definitions_.import_rtc="from machine import RTC";return["RTC().datetime()["+a+"]",Blockly.Python.ORDER_NONE]};Blockly.Python.loop_forever=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=Blockly.Python.statementToCode(a,"DO");b=Blockly.Python.addLoopTrap("  utime.sleep_ms(0)\n"+b,a)||Blockly.Python.PASS;return"while True:\n"+b};
Blockly.Python.timer=function(a){for(var b=a.getFieldValue("interval"),c=a.getFieldValue("timerNumber"),d=Blockly.Python.statementToCode(a,"statements"),e=a.getFieldValue("MODE"),f=[],k=Blockly.Variables.allUsedVarModels(a.workspace)||[],g=0,l;l=k[g];g++)l=l.name,-1==a.getVars().indexOf(l)&&f.push(Blockly.Python.nameDB_.getName(l,Blockly.VARIABLE_CATEGORY_NAME));f=f.length?Blockly.Python.INDENT+"global "+f.join(", ")+"\n":"";Blockly.Python.definitions_.import_timer="from machine import Timer";Blockly.Python.definitions_["import_timer_start"+
c]="tim"+c+" = Timer("+c+")";Blockly.Python.definitions_["import_timer_callback"+c]="\n#Timer Function Callback\ndef timerFunc"+c+"(t):\n"+f+d+"\n\n";return"tim"+c+".init(period="+b+", mode=Timer."+e+", callback=timerFunc"+c+")\n"};Blockly.Python.stop_timer=function(a){Blockly.Python.definitions_.import_timer="from machine import Timer";return"tim"+Blockly.Python.valueToCode(a,"timerNumber",Blockly.Python.ORDER_ATOMIC)+".deinit()\n"};
Blockly.Python["utime.deadline"]=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=a.getFieldValue("ID"),c=Blockly.Python.valueToCode(a,"TIME",Blockly.Python.ORDER_NONE),d=a.getFieldValue("SCALE");a=Blockly.Python.statementToCode(a,"DO");return"deadline"+b+" = utime.ticks_add(utime."+d+"(), "+c+")\nwhile utime.ticks_diff(deadline"+b+", utime."+d+"()) > 0:\n"+a+"\n"};
Blockly.Python.deep_sleep=function(a){a=Blockly.Python.valueToCode(a,"interval",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_machine="import machine";return"machine.deepsleep("+a+")\n"};
Blockly.Python.neopixel_color_numbers=function(a){var b=Blockly.Python.valueToCode(a,"red",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"green",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"blue",Blockly.Python.ORDER_ATOMIC);this.styleBlock([b,c,a]);return["("+b+","+c+","+a+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.neopixel_color_colors=function(a){a=a.getFieldValue("color");a=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a);return["("+parseInt(a[1],16)+", "+parseInt(a[2],16)+", "+parseInt(a[3],16)+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.HSL_to_RGB=function(a){var b=Blockly.Python.valueToCode(a,"hue",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"saturation",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"lightness",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.HSL_to_RGB="def HSL_to_RGB(h, s, l):\n\th, s, l = h/360, s/100, l/100\n\tdef hue2rgb (p, q, t):\n\t\tif(t < 0.): t += 1\n\t\tif(t > 1.): t -= 1\n\t\tif(t < 1/6): return p + (q - p) * 6 * t\n\t\tif(t < 1/2): return q\n\t\tif(t < 2/3): return p + (q - p) * (2/3 - t) * 6\n\t\treturn p\n\tq = l * (1 + s) if l < 0.5 else l + s - l * s\n\tp = 2 * l - q\n\tr, g, b = hue2rgb(p, q, h + 1/3), hue2rgb(p, q, h), hue2rgb(p, q, h - 1/3)\n\treturn (int(r * 255), int(g * 255), int(b * 255))\n";
this.styleBlock([b,c,a]);return["HSL_to_RGB("+b+","+c+","+a+")",Blockly.Python.ORDER_NONE]};Blockly.Python.neopixel_init=function(a){Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_neopixel="import neopixel";var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_NONE);a=Blockly.Python.valueToCode(a,"number",Blockly.Python.ORDER_NONE);return"np=neopixel.NeoPixel(Pin("+b+"),int("+a+"))\nmax_neopixel = int("+a+")\n"};
Blockly.Python.neopixel_control=function(a){var b=Blockly.Python.valueToCode(a,"address",Blockly.Python.ORDER_NONE);a=Blockly.Python.valueToCode(a,"color",Blockly.Python.ORDER_NONE);Blockly.Python.definitions_.import_utime="import utime";Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_neopixel="import neopixel";Blockly.Python.definitions_.set_neopixel="\ndef neopixel_write(neopixel_num,neopixel_set_col):\n  global np\n  try:\n     np[int(neopixel_num)]=neopixel_set_col\n  except Exception as err_code_str:\n     utime.sleep_ms(0)\n     print('Chyba pri zapisu dat do neopixelu cislo ' + str(1) + ' platna adresa neopixelu je 0 az ' + str(max_neopixel - 1))\n";
return"neopixel_write("+b+","+a+")\n"};Blockly.Python.neopixel_write=function(a){return"np.write()\n"};
Blockly.Python.neopixel_5x5=function(a){Blockly.Python.definitions_.import_utime="import utime";Blockly.Python.definitions_.set_neopixel="\ndef neopixel_write(neopixel_num,neopixel_set_col):\n  global np\n  try:\n     np[int(neopixel_num)]=neopixel_set_col\n  except Exception as err_code_str:\n     utime.sleep_ms(0)\n     print('Chyba pri zapisu dat do neopixelu cislo ' + str(1) + ' platna adresa neopixelu je 0 az ' + str(max_neopixel - 1))\n";for(var b="",c=0;25>c;c++){var d=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(a.getFieldValue("pix"+
c));b=b+"neopixel_write("+c+",("+parseInt(d[1],16)+", "+parseInt(d[2],16)+", "+parseInt(d[3],16)+"))\n"}return b};
Blockly.Python.get_pos_5x5=function(a){var b=Blockly.Python.valueToCode(a,"posX",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"posY",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.get_pos_5x5='\ndef get_pos_5x5(x,y):\n    neopix_map = [[24,15,14,5,4],[23,16,13,6,3],[22,17,12,7,2],[21,18,11,8,1],[20,19,10,9,0]]\n    \n    if ((x>4) or (y>4) or (x<0) or (y<0)): \n        print("X nebo Y jsou mimo rozsah, povolene jsou hodnoty 0 az 4")\n        return 0\n    else:\n        return(neopix_map[int(y)][int(x)])\n';return["get_pos_5x5("+
b+","+a+")",Blockly.Python.ORDER_NONE]};Blockly.Python.dht_init=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);a=a.getFieldValue("DHT_TYPE");Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_dht="import dht";Blockly.Python.definitions_.import_time="import time";"AM2302"==a&&(a="DHT22");return"dhts=dht."+a+"(Pin("+b+'))\ntime.sleep(1)\ntry:\n  dhts.measure()\n  time.sleep(1)\nexcept OSError as e:\n  print("Chyba pri cteni snimace teploty.")\n\n'};
Blockly.Python.dht_measure=function(a){return'try:\n  dhts.measure()\n  time.sleep(1)\nexcept OSError as e:\n  print("Chyba pri cteni snimace teploty.")\n\n'};Blockly.Python.dht_read_temp=function(a){return["dhts.temperature()",Blockly.Python.ORDER_NONE]};Blockly.Python.dht_read_humidity=function(a){return["dhts.humidity()",Blockly.Python.ORDER_NONE]};
Blockly.Python.hcsr_init=function(a){var b=a.getFieldValue("hc_id"),c=Blockly.Python.valueToCode(a,"echo",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"trigger",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_time="import time";Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_hcr="\n\nfrom machine import time_pulse_us\n\n#Based on: https://github.com/lemariva/uPySensors\nclass HCSR04:\n    def __init__(self, trigger_pin, echo_pin, echo_timeout_us=500*2*30):\n        self.echo_timeout_us = echo_timeout_us\n        self.trigger = Pin(trigger_pin, mode=Pin.OUT)\n        self.trigger.value(0)\n        self.echo = Pin(echo_pin, mode=Pin.IN)\n\n    def _send_pulse_and_wait(self):\n        self.trigger.value(0)\n        time.sleep_us(100)\n        self.trigger.value(1)\n        time.sleep_us(10)\n        self.trigger.value(0)\n        try:\n            pulse_time = time_pulse_us(self.echo, 1, self.echo_timeout_us)\n            return pulse_time\n        except OSError as ex:\n            if ex.args[0] == 110: # 110 = ETIMEDOUT\n                raise OSError('Out of range')\n            raise ex\n\n    def distance_mm(self):\n        mm = 2000\n        for i in range(3):\n            pulse_time = self._send_pulse_and_wait()\n            time.sleep_ms(50 + (i * 25))\n            if pulse_time > 0:\n                mm = pulse_time * 100 // 582\n                break\n        return mm\n\n    def distance_cm(self):\n        cms = 200\n        for i in range(3):\n            pulse_time = self._send_pulse_and_wait()\n            time.sleep_ms(50 + (i * 25))\n            if pulse_time > 0:\n                cms = (pulse_time / 2) / 29.1\n                break\n        return cms\n";
return"ultraSoundSensor"+b+" = HCSR04(trigger_pin="+a+", echo_pin="+c+", echo_timeout_us=15000)\n"};Blockly.Python.hcsr_read_mm=function(a){return["ultraSoundSensor"+a.getFieldValue("hc_id")+".distance_mm()",Blockly.Python.ORDER_NONE]};Blockly.Python.hcsr_read_cm=function(a){return["ultraSoundSensor"+a.getFieldValue("hc_id")+".distance_cm()",Blockly.Python.ORDER_NONE]};
Blockly.Python.tcs34725_init=function(a){Blockly.Python.definitions_.import_time="import time";Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_SoftI2C="from machine import SoftI2C";Blockly.Python.definitions_.import_tcs34725="import tcs34725";var b=a.getFieldValue("rgb_id"),c=Blockly.Python.valueToCode(a,"exposure",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"scl",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"sda",
Blockly.Python.ORDER_ATOMIC);return"i2c_rgb"+b+" = SoftI2C(scl=Pin("+d+"), sda=Pin("+a+"), freq=100000)\nrgb_sensor"+b+" = tcs34725.TCS34725(i2c_rgb"+b+","+c+")\n"};Blockly.Python.tcs34725_is_col=function(a){var b=a.getFieldValue("rgb_id");a=a.getFieldValue("col");this.styleBlock([[0,0,0],[200,200,200],[245,0,0],[0,245,0],[0,0,245],[200,200,0]][a]);return["rgb_sensor"+b+".is_"+"black white red green blue yellow".split(" ")[a]+"()",Blockly.Python.ORDER_NONE]};
Blockly.Python.tcs34725_rgb=function(a){var b=a.getFieldValue("rgb_id");a=a.getFieldValue("col");this.styleBlock([[245,0,0],[0,245,0],[0,0,245]][a]);return["rgb_sensor"+b+".get_"+["red","green","blue"][a]+"()",Blockly.Python.ORDER_NONE]};
Blockly.Python.zmena_rozsahu=function(a){var b=Blockly.Python.valueToCode(a,"in_value",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"in_min",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"in_max",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"out_min",Blockly.Python.ORDER_ATOMIC),f=Blockly.Python.valueToCode(a,"out_max",Blockly.Python.ORDER_ATOMIC),k="TRUE"==a.getFieldValue("celociselne");a="TRUE"==a.getFieldValue("limitovat");var g="float";k&&(g="int");
k="0";a&&(k="1");Blockly.Python.definitions_.map_function="\ndef convert_float(x, in_min, in_max, out_min, out_max, lim=1):\n    if lim == 0:\n        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n    else:\n        if out_min > out_max:\n            return min(max(out_max, (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min), out_min)\n        else:\n            return max(min(out_max, (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min), out_min)\n\n\ndef convert_int(x, in_min, in_max, out_min, out_max, lim=1):\n    if lim == 0:\n        return int((x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min)\n    else:\n        if out_min > out_max:\n            return int(min(max(out_max, (x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min), out_min))\n        else:\n            return int(max(min(out_max, (x - in_min) * (out_max - out_min) // (in_max - in_min) + out_min), out_min))\n";
return["convert_"+g+"("+b+", "+c+", "+d+", "+e+", "+f+", "+k+")",Blockly.Python.ORDER_NONE]};Blockly.Python.fb_fill=function(a){return"fbuf.fill("+a.getFieldValue("barva")+")\n"};Blockly.Python.oded_refresh=function(a){return"display.show()\n"};
Blockly.Python.fb_pixel=function(a){var b=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"col",Blockly.Python.ORDER_ATOMIC);return"fbuf.pixel(int("+b+"), int("+c+"), int("+a+"))\n"};
Blockly.Python.fb_line=function(a){var b=Blockly.Python.valueToCode(a,"px1",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"py1",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"px2",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"py2",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"col",Blockly.Python.ORDER_ATOMIC);return"fbuf.line(int("+b+"), int("+c+"), int("+d+"), int("+e+"), int("+a+"))\n"};
Blockly.Python.fb_rect=function(a){var b=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"sirka",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"vyska",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"col",Blockly.Python.ORDER_ATOMIC);return"fbuf.rect(int("+b+"), int("+c+"), int("+d+"), int("+e+"), int("+a+"))\n"};
Blockly.Python.fb_rect_fill=function(a){var b=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"sirka",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"vyska",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"col",Blockly.Python.ORDER_ATOMIC);return"fbuf.fill_rect(int("+b+"), int("+c+"), int("+d+"), int("+e+"), int("+a+"))\n"};
Blockly.Python.fb_draw_pic=function(a){var b=a.getFieldValue("name"),c=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"data",Blockly.Python.ORDER_ATOMIC);a=a.getFieldValue("alpha");e=e.slice(1,-1).replace(/\\\\/g,"\\");b=b.normalize("NFD").replace(/[\u0300-\u036f]/g,"");Blockly.Python.definitions_["pix_"+b]=b+" = framebuf.FrameBuffer("+e+", framebuf.MONO_VLSB)";return"fbuf.blit("+b+", int("+
c+"), int("+d+"), int("+a+"))\n"};Blockly.Python.fb_txt=function(a){var b=Blockly.Python.valueToCode(a,"text",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"barva",Blockly.Python.ORDER_ATOMIC);return"fbuf.text(str("+b+"), int("+c+"), int("+d+"), int("+a+"))\n"};
Blockly.Python.fb_txt_mini=function(a){var b=Blockly.Python.valueToCode(a,"text",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"px",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"py",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"barva",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_minifont="import minifont";return"minifont.mini_text(fbuf, str("+b+"), int("+c+"), int("+d+"), int("+a+"))\n"};
Blockly.Python.servo_init=function(a){var b=a.getFieldValue("ID");a=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_servo="from servo import Servo";Blockly.Python.definitions_["def_servo"+b]="servo"+b+" = Servo(Pin("+a+"))\n";return""};
Blockly.Python.servo_angle=function(a){var b=a.getFieldValue("ID");a=Blockly.Python.valueToCode(a,"uhel",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_servo="from servo import Servo";0>a&&(a=0);180<a&&(a=180);return"servo"+b+".write_angle(int("+a+"))\n"};
Blockly.Python.set_servo_speed=function(a){var b=a.getFieldValue("ID"),c=Blockly.Python.valueToCode(a,"speed",Blockly.Python.ORDER_ATOMIC);a="TRUE"==a.getFieldValue("reverse");Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_servo="from servo import Servo";-100>c&&(c=-100);100<c&&(c=100);return a?"servo"+b+".write_speed(int("+c+" * (-1)))\n":"servo"+b+".write_speed(int("+c+"))\n"};
Blockly.Python.set_servo_us=function(a){var b=a.getFieldValue("ID");a=Blockly.Python.valueToCode(a,"time",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_servo="from servo import Servo";return"servo"+b+".write_us(int("+a+"))\n"};
Blockly.Python.dc_motor_init=function(a){var b=a.getFieldValue("motor_name"),c=a.getFieldValue("motor_dir"),d=Blockly.Python.valueToCode(a,"pin1",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"pin2",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_dcmotorlib="import dcmotorlib";Blockly.Python.definitions_["def_dc_mot"+b]="dc_mot"+b+" = dcmotorlib.DCMotor("+d+","+a+","+c+")\n";return""};
Blockly.Python.dc_motor_speed=function(a){var b=a.getFieldValue("motor_name");a=Blockly.Python.valueToCode(a,"in_speed",Blockly.Python.ORDER_ATOMIC);return"dc_mot"+b+".set_speed("+a+")\n"};
Blockly.Python.wifi_conect=function(a){var b=Blockly.Python.valueToCode(a,"ssid",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"pass",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.do_connect="\ndef do_connect_sta(ssid,pass):\n    import network\n    sta_if = network.WLAN(network.STA_IF)\n    if not sta_if.isconnected():\n        print('Pripojovani k Wi-Fi siti...')\n        sta_if.active(True)\n        sta_if.connect(ssid, pass)\n        while not sta_if.isconnected():\n            pass\n    print('Pripojeno! Nastaveni site:', sta_if.ifconfig())\n";return"do_connect_sta("+
b+", "+a+")\n"};
Blockly.Python.blynk_connect=function(a){Blockly.Python.definitions_.import_utime="import utime";Blockly.Python.definitions_.import_BlynkLib="import BlynkLib";a=Blockly.Python.valueToCode(a,"Blynk_ID",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.BlynkLib_ID="BLYNK_AUTH = '"+a.replace(/["']/g,"")+"'";Blockly.Python.definitions_.BlynkLib='\nblynk_is_connected = False\nblynk_vpins = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n# initialize Blynk\nblynk = BlynkLib.Blynk(BLYNK_AUTH,insecure=True)\n\n@blynk.on("connected")\ndef blynk_connected(ping):\n    print(\'Pripojeno k Blynk.io  Ping:\', ping, \'ms\')\n    blynk.sync_virtual(0,1,2,3,4,5,6,7,8,9)\n    blynk.sync_virtual(10,11,12,13,14,15,16,17,18,19)\n    blynk_is_connected = True\n\n@blynk.on("disconnected")\ndef blynk_disconnected():\n    print(\'Odpojeno od Blynk.io\')\n    blynk_is_connected = False\n\n@blynk.on("V*")\ndef blynk_handle_vpins(pin, value):\n    blynk_is_connected = True\n    #print("V{} value: {}".format(pin, value))\n    try:\n        blynk_vpins[int(pin)] = int(value[0])\n    except ValueError:\n        #print("Not a int")\n        try:\n            blynk_vpins[int(pin)] = float(value[0])\n        except ValueError:\n            #print("Not a float")\n            blynk_vpins[int(pin)] = value[0]\n\nblynk.run()\nutime.sleep_ms(50)\nblynk.run()\nutime.sleep_ms(50)\n';return""};
Blockly.Python.blynk_run=function(a){Blockly.Python.definitions_.import_utime="import utime";return"blynk.run()\nutime.sleep_ms(50)\n"};Blockly.Python.blynk_write=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=a.getFieldValue("vpin");a=Blockly.Python.valueToCode(a,"val",Blockly.Python.ORDER_ATOMIC);return"blynk.virtual_write("+b+", "+a+")\nutime.sleep_ms(25)\n"};Blockly.Python.blynk_read=function(a){return["blynk_vpins["+a.getFieldValue("vpin")+"]",Blockly.Python.ORDER_NONE]};
Blockly.Python.blynk_is_connected=function(a){return["blynk_is_connected",Blockly.Python.ORDER_NONE]};
Blockly.Python.joystick_init=function(a){var b=a.getFieldValue("joy_name"),c=a.getFieldValue("rot"),d=Blockly.Python.valueToCode(a,"vrx",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"vry",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"sw",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_["import joy_lib"]="import joy_lib";Blockly.Python.definitions_["joy_"+b]="joystick"+b+" = joy_lib.joystick("+d+", "+e+", "+a+", "+c+")";2==b?this.styleBlock([0,0,193]):this.styleBlock([193,
0,0]);return""};
Blockly.Python.get_joy_axis=function(a){var b=a.getFieldValue("joy_name");a=a.getFieldValue("axis");9<b&&(Blockly.Python.definitions_.vjoy_init="\nclass joystick(object) :\n    global v_joyX\n    global v_joyY\n\n    def __init__(self, joy_selector):\n        self._otmpx = 0\n        self._otmpy = 0\n        self._otmpsw = 0\n        self._joy_selector = int(joy_selector)\n\n    def _joy_read(self):\n        global L_v_joyX\n        global L_v_joyY\n        global L_v_press\n        \n        global R_v_joyX\n        global R_v_joyY\n        global R_v_press\n\n        if (self._joy_selector == 10):\n            self._otmpx = min(max(int(R_v_joyX), -100,), 100)\n            self._otmpy = min(max(int(R_v_joyY), -100,), 100)\n            self._otmpsw = int(R_v_press)\n        \n        if (self._joy_selector == 20):\n            self._otmpx = min(max(int(L_v_joyX), -100,), 100)\n            self._otmpy = min(max(int(L_v_joyY), -100,), 100)\n            self._otmpsw = int(L_v_press)\n\n    def joy_check(self, joy_dir):\n        self._joy_read()\n        if (joy_dir == 1) and (self._otmpy > 40):\n            return True\n        if (joy_dir == 2) and (self._otmpx > 40):\n            return True\n        if (joy_dir == 3) and (self._otmpy < (-40)):\n            return True\n        if (joy_dir == 4) and (self._otmpx < (-40)):\n            return True\n        if (joy_dir == 5) and (self._otmpsw):\n            return True\n        return False\n\n    def get_joyX(self):\n        self._joy_read()\n        return self._otmpx\n    \n    def get_joyY(self):\n        self._joy_read()\n        return self._otmpy\n",Blockly.Python.definitions_["vjoy_instance_"+
b]="joystick"+b+" = joystick("+b+")\n");2==b||20==b?this.styleBlock([0,0,193]):this.styleBlock([193,0,0]);return["joystick"+b+".get_joy"+a+"()",Blockly.Python.ORDER_NONE]};
Blockly.Python.get_joy_state=function(a){var b=a.getFieldValue("joy_name");a=a.getFieldValue("axis");9<b&&(Blockly.Python.definitions_["vjoy_"+b]="\nclass joystick(object) :\n    global v_joyX\n    global v_joyY\n\n    def __init__(self, joy_selector):\n        self._otmpx = 0\n        self._otmpy = 0\n        self._otmpsw = 0\n        self._joy_selector = int(joy_selector)\n\n    def _joy_read(self):\n        global L_v_joyX\n        global L_v_joyY\n        global L_v_press\n        \n        global R_v_joyX\n        global R_v_joyY\n        global R_v_press\n\n        if (self._joy_selector == 10):\n            self._otmpx = min(max(int(R_v_joyX), -100,), 100)\n            self._otmpy = min(max(int(R_v_joyY), -100,), 100)\n            self._otmpsw = int(R_v_press)\n        \n        if (self._joy_selector == 20):\n            self._otmpx = min(max(int(L_v_joyX), -100,), 100)\n            self._otmpy = min(max(int(L_v_joyY), -100,), 100)\n            self._otmpsw = int(L_v_press)\n\n    def joy_check(self, joy_dir):\n        self._joy_read()\n        if (joy_dir == 1) and (self._otmpy > 40):\n            return True\n        if (joy_dir == 2) and (self._otmpx > 40):\n            return True\n        if (joy_dir == 3) and (self._otmpy < (-40)):\n            return True\n        if (joy_dir == 4) and (self._otmpx < (-40)):\n            return True\n        if (joy_dir == 5) and (self._otmpsw):\n            return True\n        return False\n\n    def get_joyX(self):\n        self._joy_read()\n        return self._otmpx\n    \n    def get_joyY(self):\n        self._joy_read()\n        return self._otmpy\n",Blockly.Python.definitions_["vjoy_instance_"+
b]="joystick"+b+" = joystick("+b+")\n");2==b||20==b?this.styleBlock([0,0,193]):this.styleBlock([193,0,0]);return["joystick"+b+".joy_check("+a+")",Blockly.Python.ORDER_NONE]};
Blockly.Python.esp_now_send_str=function(a){a=Blockly.Python.valueToCode(a,"message",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.ESP_Now_init="\nimport network\nimport espnow\n\ntry:\n    peer = b'\\xff\\xff\\xff\\xff\\xff\\xff'   # Broadcast MAC address\n    espnow_instance = espnow.ESPNow()\n    espnow_instance.active(True)\n    espnow_instance.add_peer(peer)             # Register peer on STA_IF\n    print('ESP Now inicializovan')\nexcept:\n    print('ESP Now byl jiz inicializovan')\n\ndef esp_now_read_msg(etimeout = 1):\n    try:\n        out_msg = espnow_instance.irecv(etimeout)[1].split(b'\x00')[0].decode()\n    except:\n        out_msg = \"\"\n    return out_msg\n";return"espnow_instance.send(peer, str("+
a+"))\n"};
Blockly.Python.esp_now_data_check=function(a){Blockly.Python.definitions_.ESP_Now_init="\nimport network\nimport espnow\n\ntry:\n    peer = b'\\xff\\xff\\xff\\xff\\xff\\xff'   # Broadcast MAC address\n    espnow_instance = espnow.ESPNow()\n    espnow_instance.active(True)\n    espnow_instance.add_peer(peer)             # Register peer on STA_IF\n    print('ESP Now inicalizovan')\nexcept:\n    print('ESP Now byl jiz inicializovan')\n\ndef esp_now_read_msg(etimeout = 1):\n    try:\n        out_msg = espnow_instance.irecv(etimeout)[1].split(b'\x00')[0].decode()\n    except:\n        out_msg = \"\"\n    return out_msg\n";return["(espnow_instance.any() == True)",
Blockly.Python.ORDER_NONE]};
Blockly.Python.esp_now_new_data=function(a){Blockly.Python.definitions_.ESP_Now_init="\nimport network\nimport espnow\n\ntry:\n    peer = b'\\xff\\xff\\xff\\xff\\xff\\xff'   # Broadcast MAC address\n    espnow_instance = espnow.ESPNow()\n    espnow_instance.active(True)\n    espnow_instance.add_peer(peer)             # Register peer on STA_IF\n    print('ESP Now inicalizovan')\nexcept:\n    print('ESP Now byl jiz inicializovan')\n\ndef esp_now_read_msg(etimeout = 1):\n    try:\n        out_msg = espnow_instance.irecv(etimeout)[1].split(b'\x00')[0].decode()\n    except:\n        out_msg = \"\"\n    return out_msg\n";return["esp_now_read_msg()",
Blockly.Python.ORDER_NONE]};Blockly.Python.uart_init=function(a){a.getFieldValue("baud");a.getFieldValue("bits");a.getFieldValue("parity");a.getFieldValue("stop_bit");return"...\n"};Blockly.Python.python_try_catch=function(a){Blockly.Python.definitions_.import_utime="import utime";var b=Blockly.Python.statementToCode(a,"try");a=Blockly.Python.statementToCode(a,"catch");return"try:\n"+b+"except Exception as err_code_str:\n  utime.sleep_ms(0)\n"+a+"\n"};
Blockly.Python.python_catch_err=function(a){return["str(err_code_str)",Blockly.Python.ORDER_NONE]};Blockly.Python.exec_python=function(a){return Blockly.Python.valueToCode(a,"command",Blockly.Python.ORDER_ATOMIC).replace("'","").replace("'","")+"\n"};
Blockly.Python.mpu6050_init=function(a){Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_SoftI2C="from machine import SoftI2C";Blockly.Python.definitions_.import_mpu6050="from mpu6050 import mpu6050";var b=Blockly.Python.valueToCode(a,"SCL",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"SDA",Blockly.Python.ORDER_ATOMIC);return"i2c_mpu6050 = SoftI2C(scl=Pin("+b+"), sda=Pin("+a+"), freq=400000)\nmpu = mpu6050(i2c_mpu6050)\nmpu.calcOffsets(1, 1)\n"};
Blockly.Python.mpu6050_calibrate=function(a){Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_SoftI2C="from machine import SoftI2C";Blockly.Python.definitions_.import_mpu6050="from mpu6050 import mpu6050";return"mpu.calcOffsets(1, 1)\n"};
Blockly.Python.mpu6050_fetch=function(a){Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_SoftI2C="from machine import SoftI2C";Blockly.Python.definitions_.import_mpu6050="from mpu6050 import mpu6050";return"mpu.update()\n"};Blockly.Python.mpu6050_get_angle=function(a){return["mpu.getAngles()["+a.getFieldValue("axis")+"]",Blockly.Python.ORDER_NONE]};
Blockly.Python.mpu6050_get_accel=function(a){return["mpu.getAccel()["+a.getFieldValue("axis")+"]",Blockly.Python.ORDER_NONE]};Blockly.Python.mpu6050_get_gyro=function(a){return["mpu.getGyro()["+a.getFieldValue("axis")+"]",Blockly.Python.ORDER_NONE]};Blockly.Python.mpu6050_get_temp=function(a){return["mpu.getTemp()",Blockly.Python.ORDER_NONE]};
Blockly.Python.encoder_init=function(a){var b=a.getFieldValue("index"),c=Blockly.Python.valueToCode(a,"A",Blockly.Python.ORDER_ATOMIC),d=Blockly.Python.valueToCode(a,"B",Blockly.Python.ORDER_ATOMIC),e=Blockly.Python.valueToCode(a,"reverse",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"scale",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.Encoder_init="\nclass Encoder(object):\n    def __init__(self, pin_x, pin_y, reverse, scale):\n        self.reverse = reverse\n        self.scale = scale\n        self.forward = True\n        self.pin_x = pin_x\n        self.pin_y = pin_y\n        self._pos = 0\n        self.x_interrupt = pin_x.irq(trigger=Pin.IRQ_RISING | Pin.IRQ_FALLING, handler=self.x_callback)\n        self.y_interrupt = pin_y.irq(trigger=Pin.IRQ_RISING | Pin.IRQ_FALLING, handler=self.y_callback)\n\n    def x_callback(self, line):\n        self.forward = self.pin_x.value() ^ self.pin_y.value() ^ self.reverse\n        self._pos += 1 if self.forward else -1\n\n    def y_callback(self, line):\n        self.forward = self.pin_x.value() ^ self.pin_y.value() ^ self.reverse ^ 1\n        self._pos += 1 if self.forward else -1\n\n    @property\n    def position(self):\n        return self._pos * self.scale\n\n    @position.setter\n    def position(self, value):\n        self._pos = value // self.scale\n";
return"encoder"+b+" = Encoder(Pin(("+c+"), Pin.IN), Pin(("+d+"), Pin.IN) ,"+e+","+a+")\n"};Blockly.Python.encoder_set=function(a){var b=a.getFieldValue("index");a=Blockly.Python.valueToCode(a,"Val",Blockly.Python.ORDER_ATOMIC);return"encoder"+b+".position = "+a+"\n"};Blockly.Python.encoder_get=function(a){return["encoder"+a.getFieldValue("index")+".position",Blockly.Python.ORDER_NONE]};
Blockly.Python.dac_write=function(a){var b=a.getFieldValue("pin");a=Blockly.Python.valueToCode(a,"val",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_dac="from machine import DAC";Blockly.Python.definitions_.dac_write="\ndef dac_write(dac,dac_val):\n    if dac_val < 0:\n        dac_val = 0\n    if dac_val > 255:\n        dac_val = 255\n    dac.write(int(dac_val))\n";Blockly.Python.definitions_["dac"+b]="dac"+b+" = DAC(Pin("+
b+"))";return"dac_write(dac"+b+","+a+")\n"};Blockly.Python.def_exit=function(a){a=Blockly.Python.statementToCode(a,"exit_code");Blockly.Python.definitions_.on_exit="def on_exit():\n"+a+"\n";return"\n"};Blockly.Python.get_ssid=function(a){return["str(WIFI_SSID)",Blockly.Python.ORDER_NONE]};Blockly.Python.get_ip=function(a){return["str(WIFI_IP)",Blockly.Python.ORDER_NONE]};
Blockly.Python.http_request=function(a){a=Blockly.Python.valueToCode(a,"url",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.urequests="import urequests";Blockly.Python.definitions_.http_request_get="\ndef http_get_request(url):\n    try:\n        request = urequests.get(url)\n        if (request.status_code) == 200:\n            return str(request.content.decode('utf-8'))\n        else:\n            print('Chyba pri cteni HTTP dat. Status code = ' + str(request.status_code))\n            return \"chyba\"\n    except:\n        print('Chyba pri cteni HTTP dat.')\n        return \"chyba\"\n";
return["http_get_request(str("+a+"))",Blockly.Python.ORDER_NONE]};
Blockly.Python.vl53l0x_init=function(a){var b=a.getFieldValue("ID"),c=Blockly.Python.valueToCode(a,"SDA",Blockly.Python.ORDER_ATOMIC);a=Blockly.Python.valueToCode(a,"SCL",Blockly.Python.ORDER_ATOMIC);Blockly.Python.definitions_.import_pin="from machine import Pin";Blockly.Python.definitions_.import_SoftI2C="from machine import SoftI2C";Blockly.Python.definitions_.import_VL53L0X="from vl53l0x import VL53L0X";c="# Create a VL53L0X object\ntry:\n   tof"+b+" = VL53L0X(SoftI2C(scl=Pin("+a+"), sda=Pin("+
c+"), freq=400000))\n   tof"+b+".set_measurement_timing_budget(50000)\n   tof"+b+".set_Vcsel_pulse_period(tof"+b+".vcsel_period_type[0], 16)\n";c=c+"   tof"+b+".set_Vcsel_pulse_period(tof"+b+".vcsel_period_type[1], 12)\n";c+="except Exception as err_code_str:\n";c=c+"   print('Chyba inicializace laseroveho dalkomeru "+b+" : ', err_code_str)\n";Blockly.Python.definitions_["VL53L0X"+b+"_init"]=c;return"\n"};
Blockly.Python.vl53l0x_fast_dist_mm=function(a){return["tof"+a.getFieldValue("ID")+".read_non_blocking()",Blockly.Python.ORDER_NONE]};Blockly.Python.vl53l0x_fast_dist_cm=function(a){return["int(tof"+a.getFieldValue("ID")+".read_non_blocking()/10)",Blockly.Python.ORDER_NONE]};Blockly.Python.vl53l0x_dist_mm=function(a){return["tof"+a.getFieldValue("ID")+".ping()",Blockly.Python.ORDER_NONE]};Blockly.Python.vl53l0x_dist_cm=function(a){return["int(tof"+a.getFieldValue("ID")+".ping()/10)",Blockly.Python.ORDER_NONE]};Blockly.Python.procedures={};
Blockly.Python.procedures_defreturn=function(a){for(var b=[],c=a.workspace,d=Blockly.Variables.allUsedVarModels(c)||[],e=0,f;f=d[e];e++)f=f.name,-1==a.getVars().indexOf(f)&&b.push(Blockly.Python.nameDB_.getName(f,Blockly.VARIABLE_CATEGORY_NAME));d=Blockly.Variables.allDeveloperVariables(c);for(e=0;e<d.length;e++)b.push(Blockly.Python.nameDB_.getName(d[e],Blockly.Names.DEVELOPER_VARIABLE_TYPE));b=b.length?Blockly.Python.INDENT+"global "+b.join(", ")+"\n":"";c=Blockly.Python.nameDB_.getName(a.getFieldValue("NAME"),Blockly.PROCEDURE_CATEGORY_NAME);
f="";Blockly.Python.STATEMENT_PREFIX&&(f+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(f+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));f&&(f=Blockly.Python.prefixLines(f,Blockly.Python.INDENT));var k="";Blockly.Python.INFINITE_LOOP_TRAP&&(k=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP,a),Blockly.Python.INDENT));var g=Blockly.Python.statementToCode(a,"STACK"),l=Blockly.Python.valueToCode(a,"RETURN",
Blockly.Python.ORDER_NONE)||"",n="";g&&l&&(n=f);l?l=Blockly.Python.INDENT+"return "+l+"\n":g||(g=Blockly.Python.PASS);var h=[];d=a.getVars();for(e=0;e<d.length;e++)h[e]=Blockly.Python.nameDB_.getName(d[e],Blockly.VARIABLE_CATEGORY_NAME);b="def "+c+"("+h.join(", ")+"):\n"+b+f+k+g+n+l;b=Blockly.Python.scrub_(a,b);Blockly.Python.definitions_["%"+c]=b;return null};Blockly.Python.procedures_defnoreturn=Blockly.Python.procedures_defreturn;
Blockly.Python.procedures_callreturn=function(a){for(var b=Blockly.Python.nameDB_.getName(a.getFieldValue("NAME"),Blockly.PROCEDURE_CATEGORY_NAME),c=[],d=a.getVars(),e=0;e<d.length;e++)c[e]=Blockly.Python.valueToCode(a,"ARG"+e,Blockly.Python.ORDER_NONE)||"None";return[b+"("+c.join(", ")+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.procedures_callnoreturn=function(a){return Blockly.Python.procedures_callreturn(a)[0]+"\n"};
Blockly.Python.procedures_ifreturn=function(a){var b="if "+(Blockly.Python.valueToCode(a,"CONDITION",Blockly.Python.ORDER_NONE)||"False")+":\n";Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT));a.hasReturnValue_?(a=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"None",b+=Blockly.Python.INDENT+"return "+a+"\n"):b+=Blockly.Python.INDENT+"return\n";return b};Blockly.Python.texts={};Blockly.Python.text=function(a){return[Blockly.Python.quote_(a.getFieldValue("TEXT")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text_multiline=function(a){a=Blockly.Python.multiline_quote_(a.getFieldValue("TEXT"));var b=-1!=a.indexOf("+")?Blockly.Python.ORDER_ADDITIVE:Blockly.Python.ORDER_ATOMIC;return[a,b]};Blockly.Python.text.forceString_=function(a){return Blockly.Python.text.forceString_.strRegExp.test(a)?[a,Blockly.Python.ORDER_ATOMIC]:["str("+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text.forceString_.strRegExp=/^\s*'([^']|\\')*'\s*$/;
Blockly.Python.text_join=function(a){switch(a.itemCount_){case 0:return["''",Blockly.Python.ORDER_ATOMIC];case 1:return a=Blockly.Python.valueToCode(a,"ADD0",Blockly.Python.ORDER_NONE)||"''",Blockly.Python.text.forceString_(a);case 2:var b=Blockly.Python.valueToCode(a,"ADD0",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.valueToCode(a,"ADD1",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.text.forceString_(b)[0]+" + "+Blockly.Python.text.forceString_(a)[0];return[a,Blockly.Python.ORDER_ADDITIVE];
default:b=[];for(var c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,"ADD"+c,Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.nameDB_.getDistinctName("x",Blockly.VARIABLE_CATEGORY_NAME);a="''.join([str("+a+") for "+a+" in ["+b.join(", ")+"]])";return[a,Blockly.Python.ORDER_FUNCTION_CALL]}};
Blockly.Python.text_append=function(a){var b=Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME);a=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_NONE)||"''";return b+" = str("+b+") + "+Blockly.Python.text.forceString_(a)[0]+"\n"};Blockly.Python.text_length=function(a){return["len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''")+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_isEmpty=function(a){return["not len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''")+")",Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.text_indexOf=function(a){var b="FIRST"==a.getFieldValue("END")?"find":"rfind",c=Blockly.Python.valueToCode(a,"FIND",Blockly.Python.ORDER_NONE)||"''";b=(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_MEMBER)||"''")+"."+b+"("+c+")";return a.workspace.options.oneBasedIndex?[b+" + 1",Blockly.Python.ORDER_ADDITIVE]:[b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_charAt=function(a){var b=a.getFieldValue("WHERE")||"FROM_START",c=Blockly.Python.valueToCode(a,"VALUE","RANDOM"==b?Blockly.Python.ORDER_NONE:Blockly.Python.ORDER_MEMBER)||"''";switch(b){case "FIRST":return[c+"[0]",Blockly.Python.ORDER_MEMBER];case "LAST":return[c+"[-1]",Blockly.Python.ORDER_MEMBER];case "FROM_START":return a=Blockly.Python.getAdjustedInt(a,"AT"),[c+"["+a+"]",Blockly.Python.ORDER_MEMBER];case "FROM_END":return a=Blockly.Python.getAdjustedInt(a,"AT",1,!0),[c+"["+
a+"]",Blockly.Python.ORDER_MEMBER];case "RANDOM":return Blockly.Python.definitions_.import_random="import random",[Blockly.Python.provideFunction_("text_random_letter",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(text):","  x = int(random.random() * len(text))","  return text[x];"])+"("+c+")",Blockly.Python.ORDER_FUNCTION_CALL]}throw Error("Unhandled option (text_charAt).");};
Blockly.Python.text_getSubstring=function(a){var b=a.getFieldValue("WHERE1"),c=a.getFieldValue("WHERE2"),d=Blockly.Python.valueToCode(a,"STRING",Blockly.Python.ORDER_MEMBER)||"''";switch(b){case "FROM_START":b=Blockly.Python.getAdjustedInt(a,"AT1");"0"==b&&(b="");break;case "FROM_END":b=Blockly.Python.getAdjustedInt(a,"AT1",1,!0);break;case "FIRST":b="";break;default:throw Error("Unhandled option (text_getSubstring)");}switch(c){case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT2",1);break;case "FROM_END":a=
Blockly.Python.getAdjustedInt(a,"AT2",0,!0);Blockly.isNumber(String(a))?"0"==a&&(a=""):(Blockly.Python.definitions_.import_sys="import sys",a+=" or sys.maxsize");break;case "LAST":a="";break;default:throw Error("Unhandled option (text_getSubstring)");}return[d+"["+b+" : "+a+"]",Blockly.Python.ORDER_MEMBER]};
Blockly.Python.text_changeCase=function(a){var b={UPPERCASE:".upper()",LOWERCASE:".lower()",TITLECASE:".title()"}[a.getFieldValue("CASE")];return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+b,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.text_trim=function(a){var b={LEFT:".lstrip()",RIGHT:".rstrip()",BOTH:".strip()"}[a.getFieldValue("MODE")];return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_print=function(a){return"print("+(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_NONE)||"''")+")\n"};
Blockly.Python.text_prompt_ext=function(a){var b=Blockly.Python.provideFunction_("text_prompt",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(msg):","  try:","    return raw_input(msg)","  except NameError:","    return input(msg)"]),c=a.getField("TEXT")?Blockly.Python.quote_(a.getFieldValue("TEXT")):Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_NONE)||"''";b=b+"("+c+")";"NUMBER"==a.getFieldValue("TYPE")&&(b="float("+b+")");return[b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_prompt=Blockly.Python.text_prompt_ext;Blockly.Python.text_count=function(a){var b=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''";a=Blockly.Python.valueToCode(a,"SUB",Blockly.Python.ORDER_NONE)||"''";return[b+".count("+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_replace=function(a){var b=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''",c=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"''";return[b+".replace("+c+", "+a+")",Blockly.Python.ORDER_MEMBER]};Blockly.Python.text_reverse=function(a){return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+"[::-1]",Blockly.Python.ORDER_MEMBER]};Blockly.Python.variables={};Blockly.Python.variables_get=function(a){return[Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.variables_set=function(a){var b=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"0";return Blockly.Python.nameDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME)+" = "+b+"\n"};Blockly.Python.variablesDynamic={};Blockly.Python.variables_get_dynamic=Blockly.Python.variables_get;Blockly.Python.variables_set_dynamic=Blockly.Python.variables_set;
return Blockly.Python;
}));


//# sourceMappingURL=python_compressed.js.map
